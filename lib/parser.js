module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "Attribute": parse_Attribute,
        "AttributeValue": parse_AttributeValue,
        "AttributeValueDoubleQuoted": parse_AttributeValueDoubleQuoted,
        "AttributeValueSingleQuoted": parse_AttributeValueSingleQuoted,
        "Attributes": parse_Attributes,
        "Data": parse_Data,
        "DoctypeHtml5": parse_DoctypeHtml5,
        "EmptyAttribute": parse_EmptyAttribute,
        "EndTag": parse_EndTag,
        "Name": parse_Name,
        "NameChar": parse_NameChar,
        "NameStartChar": parse_NameStartChar,
        "ProcessingInstruction": parse_ProcessingInstruction,
        "ScriptTag": parse_ScriptTag,
        "StartTag": parse_StartTag,
        "StyleTag": parse_StyleTag,
        "ValueAttribute": parse_ValueAttribute,
        "Ws": parse_Ws,
        "start": parse_start
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result8 = parse_Data();
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var result7 = parse_DoctypeHtml5();
          if (result7 !== null) {
            var result1 = result7;
          } else {
            var result6 = parse_ProcessingInstruction();
            if (result6 !== null) {
              var result1 = result6;
            } else {
              var result5 = parse_ScriptTag();
              if (result5 !== null) {
                var result1 = result5;
              } else {
                var result4 = parse_StyleTag();
                if (result4 !== null) {
                  var result1 = result4;
                } else {
                  var result3 = parse_StartTag();
                  if (result3 !== null) {
                    var result1 = result3;
                  } else {
                    var result2 = parse_EndTag();
                    if (result2 !== null) {
                      var result1 = result2;
                    } else {
                      var result1 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result8 = parse_Data();
          if (result8 !== null) {
            var result1 = result8;
          } else {
            var result7 = parse_DoctypeHtml5();
            if (result7 !== null) {
              var result1 = result7;
            } else {
              var result6 = parse_ProcessingInstruction();
              if (result6 !== null) {
                var result1 = result6;
              } else {
                var result5 = parse_ScriptTag();
                if (result5 !== null) {
                  var result1 = result5;
                } else {
                  var result4 = parse_StyleTag();
                  if (result4 !== null) {
                    var result1 = result4;
                  } else {
                    var result3 = parse_StartTag();
                    if (result3 !== null) {
                      var result1 = result3;
                    } else {
                      var result2 = parse_EndTag();
                      if (result2 !== null) {
                        var result1 = result2;
                      } else {
                        var result1 = null;;
                      };
                    };
                  };
                };
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Data() {
        var cacheKey = 'Data@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[^<\0]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[^<\\0]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[^<\0]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^<\\0]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(data) {
              // TODO: null characters should throw
              return {
                type: 'Data',
                source: data.join(""),
                toString: sourceToString
              };
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoctypeHtml5() {
        var cacheKey = 'DoctypeHtml5@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 15) === "<!DOCTYPE html>") {
          var result1 = "<!DOCTYPE html>";
          pos += 15;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"<!DOCTYPE html>\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
              return {
                type: "DOCTYPE",
                source: "<!DOCTYPE html>",
                toString: sourceToString
              };
            })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ScriptTag() {
        var cacheKey = 'ScriptTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "<script") {
          var result3 = "<script";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<script\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Attributes();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result5 = ">";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              if (input.substr(pos).match(/^[^<]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("[^<]");
                }
              }
              if (result15 !== null) {
                var result8 = result15;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos, 1) === "<") {
                  var result12 = "<";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result12 !== null) {
                  var savedPos4 = pos;
                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                  reportMatchFailures = false;
                  if (input.substr(pos, 8) === "/script>") {
                    var result14 = "/script>";
                    pos += 8;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/script>\"");
                    }
                  }
                  reportMatchFailures = savedReportMatchFailuresVar0;
                  if (result14 === null) {
                    var result13 = '';
                  } else {
                    var result13 = null;
                    pos = savedPos4;
                  }
                  if (result13 !== null) {
                    var result10 = [result12, result13];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                var result11 = result10 !== null
                  ? (function() { return '<'; })()
                  : null;
                if (result11 !== null) {
                  var result9 = result11;
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  var result8 = result9;
                } else {
                  var result8 = null;;
                };
              }
              while (result8 !== null) {
                result6.push(result8);
                if (input.substr(pos).match(/^[^<]/) !== null) {
                  var result15 = input.charAt(pos);
                  pos++;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^<]");
                  }
                }
                if (result15 !== null) {
                  var result8 = result15;
                } else {
                  var savedPos2 = pos;
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === "<") {
                    var result12 = "<";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result12 !== null) {
                    var savedPos4 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 8) === "/script>") {
                      var result14 = "/script>";
                      pos += 8;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"/script>\"");
                      }
                    }
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result14 === null) {
                      var result13 = '';
                    } else {
                      var result13 = null;
                      pos = savedPos4;
                    }
                    if (result13 !== null) {
                      var result10 = [result12, result13];
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  var result11 = result10 !== null
                    ? (function() { return '<'; })()
                    : null;
                  if (result11 !== null) {
                    var result9 = result11;
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  if (result9 !== null) {
                    var result8 = result9;
                  } else {
                    var result8 = null;;
                  };
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 9) === "</script>") {
                  var result7 = "</script>";
                  pos += 9;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"</script>\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(attributes, script) {
              return {
                type: "ScriptTag",
                attributes: attributes,
                script: script.join(""),
                source: "<script" + attributes.join("") + ">" + script.join("") + "</script>",
                toString: sourceToString
              };
            })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StyleTag() {
        var cacheKey = 'StyleTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "<style") {
          var result3 = "<style";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<style\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Attributes();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result5 = ">";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              if (input.substr(pos).match(/^[^<]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("[^<]");
                }
              }
              if (result15 !== null) {
                var result8 = result15;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos, 1) === "<") {
                  var result12 = "<";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result12 !== null) {
                  var savedPos4 = pos;
                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                  reportMatchFailures = false;
                  if (input.substr(pos, 7) === "/style>") {
                    var result14 = "/style>";
                    pos += 7;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"/style>\"");
                    }
                  }
                  reportMatchFailures = savedReportMatchFailuresVar0;
                  if (result14 === null) {
                    var result13 = '';
                  } else {
                    var result13 = null;
                    pos = savedPos4;
                  }
                  if (result13 !== null) {
                    var result10 = [result12, result13];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                var result11 = result10 !== null
                  ? (function() { return '<'; })()
                  : null;
                if (result11 !== null) {
                  var result9 = result11;
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                if (result9 !== null) {
                  var result8 = result9;
                } else {
                  var result8 = null;;
                };
              }
              while (result8 !== null) {
                result6.push(result8);
                if (input.substr(pos).match(/^[^<]/) !== null) {
                  var result15 = input.charAt(pos);
                  pos++;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^<]");
                  }
                }
                if (result15 !== null) {
                  var result8 = result15;
                } else {
                  var savedPos2 = pos;
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === "<") {
                    var result12 = "<";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result12 !== null) {
                    var savedPos4 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 7) === "/style>") {
                      var result14 = "/style>";
                      pos += 7;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"/style>\"");
                      }
                    }
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result14 === null) {
                      var result13 = '';
                    } else {
                      var result13 = null;
                      pos = savedPos4;
                    }
                    if (result13 !== null) {
                      var result10 = [result12, result13];
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  var result11 = result10 !== null
                    ? (function() { return '<'; })()
                    : null;
                  if (result11 !== null) {
                    var result9 = result11;
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  if (result9 !== null) {
                    var result8 = result9;
                  } else {
                    var result8 = null;;
                  };
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 8) === "</style>") {
                  var result7 = "</style>";
                  pos += 8;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"</style>\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(attributes, style) {
              return {
                type: "StyleTag",
                attributes: attributes,
                style: style.join(""),
                source: "<style" + attributes.join("") + ">" + style.join("") + "</style>",
                toString: sourceToString
              };
            })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StartTag() {
        var cacheKey = 'StartTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Name();
          if (result4 !== null) {
            var result5 = parse_Attributes();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result8 = "/";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === ">") {
                  var result7 = ">";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, attributes, close) {
              return {
                type: 'StartTag',
                name: name,
                attributes: attributes,
                close: close,
                source: "<" + name + attributes.join("") + close + ">",
                toString: sourceToString
              };
            })(result1[1], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EndTag() {
        var cacheKey = 'EndTag@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "</") {
          var result3 = "</";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"</\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_Name();
          if (result4 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result5 = ">";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) {
              return {
                type: 'EndTag',
                name: name,
                end: true,
                source: "</" + name + ">",
                toString: sourceToString
              };
            })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Attributes() {
        var cacheKey = 'Attributes@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_Attribute();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_Attribute();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Attribute() {
        var cacheKey = 'Attribute@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_ValueAttribute();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_EmptyAttribute();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ValueAttribute() {
        var cacheKey = 'ValueAttribute@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Ws();
        if (result3 !== null) {
          var result4 = parse_Name();
          if (result4 !== null) {
            var result5 = parse_Ws();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_Ws();
                if (result7 !== null) {
                  var result8 = parse_AttributeValue();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w1, name, w2, w3, value) {
              return {
                type: "Attribute",
                name: name,
                value: value,
                source: w1 + name + w2 + "=" + w3 + value,
                toString: sourceToString
              };
            })(result1[0], result1[1], result1[2], result1[4], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EmptyAttribute() {
        var cacheKey = 'EmptyAttribute@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Ws();
        if (result3 !== null) {
          var result4 = parse_Name();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(w, name) {
              return {
                type: "Attribute",
                name: name,
                source: w + name,
                toString: sourceToString
              };
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AttributeValue() {
        var cacheKey = 'AttributeValue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_AttributeValueDoubleQuoted();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_AttributeValueSingleQuoted();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AttributeValueDoubleQuoted() {
        var cacheKey = 'AttributeValueDoubleQuoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"\0]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\0]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"\0]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\0]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) { return '"' + value.join("") + '"'; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AttributeValueSingleQuoted() {
        var cacheKey = 'AttributeValueSingleQuoted@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^'\0]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\0]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^'\0]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\0]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) { return "'" + value.join("") + "'"; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Ws() {
        var cacheKey = 'Ws@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos, 1) === " ") {
          var result7 = " ";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos, 1) === "	") {
            var result6 = "	";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"	\"");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            if (input.substr(pos, 1) === "\n") {
              var result5 = "\n";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\n\"");
              }
            }
            if (result5 !== null) {
              var result3 = result5;
            } else {
              if (input.substr(pos, 1) === "\r") {
                var result4 = "\r";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\r\"");
                }
              }
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          };
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos, 1) === " ") {
            var result7 = " ";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\" \"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            if (input.substr(pos, 1) === "	") {
              var result6 = "	";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"	\"");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              if (input.substr(pos, 1) === "\n") {
                var result5 = "\n";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "\r") {
                  var result4 = "\r";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\r\"");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
        }
        var result2 = result1 !== null
          ? (function(space) { return space.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ProcessingInstruction() {
        var cacheKey = 'ProcessingInstruction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "<?") {
          var result1 = "<?";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"<?\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[^?]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^?]");
            }
          }
          if (result8 !== null) {
            var result2 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "?") {
              var result5 = "?";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === ">") {
                var result7 = ">";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 === null) {
                var result6 = '';
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "?>") {
              var result3 = "?>";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"?>\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Name() {
        var cacheKey = 'Name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_NameStartChar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_NameChar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_NameChar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return first + rest.join(""); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameStartChar() {
        var cacheKey = 'NameStartChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NameChar() {
        var cacheKey = 'NameChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_NameStartChar();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos).match(/^[\-.0-9\xB7\u0300-\u036F\u203F-\u2040]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-.0-9\\xB7\\u0300-\\u036F\\u203F-\\u2040]");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    function sourceToString() {
      
      return this.source;
      
    }
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
